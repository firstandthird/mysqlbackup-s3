#!/bin/bash

PREFIX=${PREFIX:-backup}
DATE=$(date +%Y%m%d_%H%M%S)
FILE="/backup/$date.sql.gz"

if [ -z "$AWS_ACCESS_KEY_ID" ]; then
  echo "AWS_ACCESS_KEY_ID must be set"
  exit 1
fi

if [ -z "$AWS_SECRET_ACCESS_KEY" ]; then
  echo "AWS_SECRET_ACCESS_KEY must be set"
  exit 1
fi

if [ -z "$S3BUCKET" ]; then
  echo "S3BUCKET must be set"
  exit 1
fi

if [ -z "$DB" ]; then
  echo "DB must be set"
  exit 1
fi

if [[ -z "$MYSQL_HOST" ]]; then
  MYSQL_HOST="mysql"
fi

if [[ -n "$MYSQL_PORT_3306_TCP_ADDR" ]]; then
  MYSQL_HOST=$MYSQL_PORT_3306_TCP_ADDR
fi

if [[ -n "$MYSQL_ENV_MYSQL_ROOT_PASSWORD" ]]; then
  MYSQL_PASS=$MYSQL_ENV_MYSQL_ROOT_PASSWORD
fi

if [[ -z "$MYSQL_USER" ]]; then
  MYSQL_USER=root
fi

if [[ "$1" == "backup" ]]; then
  echo "Starting backup..."
  mysqldump --host $MYSQL_HOST --user $MYSQL_USER -p$MYSQL_PASS --add-drop-database --databases $DB | gzip > $FILE
  aws s3api put-object --bucket $S3BUCKET --key $PREFIX-$DATE.sql.gz --body $FILE
elif [[ "$1" == "list" ]]; then
  echo "Listing backups..."
  aws s3api list-objects --bucket $S3BUCKET --query 'Contents[].{Key: Key, Size: Size}' --output table
else
  echo "Starting restore..."
  FILE=$1
  aws s3api get-object --bucket $S3BUCKET --key $FILE /backup/$FILE
  gunzip /backup/$FILE
  mysql --host $MYSQL_HOST --user $MYSQL_USER -p$MYSQL_PASS < ${FILE%.*}
fi

